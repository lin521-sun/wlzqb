{"version":3,"sources":["assets\\script\\Player.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import { ENUM_PLAYER_STATUS } from './Enum';\r\n// Created by carolsail \r\n\r\nimport DataManager from \"./manager/DataManager\";\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class Player extends cc.Component {\r\n    x: number\r\n    y: number\r\n    angle: number\r\n    status: ENUM_PLAYER_STATUS = ENUM_PLAYER_STATUS.IDLE\r\n\r\n    @property([cc.SpriteFrame])\r\n    spriteFrameArr: cc.SpriteFrame[] = []\r\n    @property(cc.Node)\r\n    ballNode: cc.Node = null\r\n    @property(cc.Node)\r\n    circleNode: cc.Node = null\r\n\r\n    init(data: any) {\r\n        if (this.spriteFrameArr.length <= 0) return\r\n        Object.assign(this, data)\r\n        DataManager.instance.blues.push(this)\r\n        this.rendor()\r\n    }\r\n    /**\r\n     * 渲染节点的状态和位置。\r\n     * \r\n     * 本函数负责更新节点的状态，并将其设置到指定的位置和角度。它不接受任何参数，也没有返回值。\r\n     * 主要用于在每次渲染周期中更新节点的视觉表现，确保节点的状态与数据模型保持一致。\r\n     */\r\n    rendor() {\r\n        this.setStatus(this.status)\r\n        this.node.setPosition(this.x, this.y)\r\n        this.node.angle = -this.angle\r\n    }\r\n    /**\r\n     * 将节点转向目标位置。\r\n     * 此函数计算当前节点到目标位置(x, y)的角度，并将节点的角度调整为面向目标位置。\r\n     * 它使用了数学中的反正切函数来计算角度，然后将角度转换为度数，并调整为顺时针旋转的度数。\r\n     * \r\n     * @param {number} x - 目标位置的x坐标，默认为0。\r\n     * @param {number} y - 目标位置的y坐标，默认为0。\r\n     */\r\n    turnTo(x: number = 0, y: number = 0) {\r\n        let r = Math.atan2(y - this.y, x - this.x);\r\n        let degree = r * 180 / Math.PI\r\n        degree = 360 - degree\r\n        this.node.angle = -degree\r\n    }\r\n    /**\r\n     * 设置玩家状态。\r\n     * @param status 玩家状态，使用ENUM_PLAYER_STATUS枚举值。\r\n     */\r\n    setStatus(status: ENUM_PLAYER_STATUS) {\r\n        this.status = status\r\n        const sprite = this.node.getComponent(cc.Sprite)\r\n        if (this.status == ENUM_PLAYER_STATUS.IDLE) {\r\n            sprite.spriteFrame = this.spriteFrameArr[0]\r\n            this.ballNode.active = false\r\n        } else if (this.status == ENUM_PLAYER_STATUS.READY) {\r\n            sprite.spriteFrame = this.spriteFrameArr[0]\r\n            this.ballNode.active = true\r\n        } else if (this.status == ENUM_PLAYER_STATUS.SHOOTING) {\r\n            sprite.spriteFrame = this.spriteFrameArr[1]\r\n            this.ballNode.active = false\r\n        }\r\n    }\r\n    /**\r\n     * 设置圆圈节点的激活状态。\r\n     * \r\n     * 此方法用于根据传入的布尔值，激活或停用一个圆圈节点。激活状态通常用于表示某个元素是否可用\r\n     * 或是否被选中。通过修改圆圈节点的active属性，可以改变其在用户界面中的表现，例如改变颜色或形状。\r\n     * \r\n     * @param status 布尔值，指示圆圈节点是否应该被激活。true表示激活，false表示停用。\r\n     */\r\n    setCircleActive(status: boolean) {\r\n        this.circleNode.active = status\r\n    }\r\n    /**\r\n     * 玩家角色触发的特效播放函数。\r\n     * 本函数旨在寻找名为'Effect'的子节点，该节点通常包含一个粒子系统组件，\r\n     * 用于播放各种视觉特效，如爆炸、火焰等。找到该节点后，将调用粒子系统的\r\n     * resetSystem方法来重置并启动特效播放。\r\n     * \r\n     * 注意：由于使用了可选链操作符(?.)，如果节点或组件不存在，函数将安全地返回，\r\n     * 而不会抛出错误或中断执行。\r\n     */\r\n    playEffect() {\r\n        this.node?.getChildByName('Effect')?.getComponent(cc.ParticleSystem).resetSystem()\r\n    }\r\n}\r\n"]}