{"version":3,"sources":["assets\\script\\manager\\ResourceManager.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["// Created by carolsail\r\nimport { ENUM_RESOURCE_TYPE } from './../Enum';\r\nimport DataManager from './DataManager';\r\n\r\nexport default class ResourceManager {\r\n\r\n    public clipMap = {}\r\n    public flagMap = {}\r\n\r\n    private static _instance: any = null\r\n\r\n    static getInstance<T>(): T {\r\n        if (this._instance === null) {\r\n            this._instance = new this()\r\n        }\r\n\r\n        return this._instance\r\n    }\r\n\r\n    static get instance() {\r\n        return this.getInstance<ResourceManager>()\r\n    }\r\n    /**\r\n        * 异步加载指定类型的资源。\r\n        * @param type 资源类型，使用ENUM_RESOURCE_TYPE枚举定义。\r\n        * @returns 返回一个Promise，表示加载过程的完成。\r\n        */\r\n    public async loadRes(type: ENUM_RESOURCE_TYPE) {\r\n        return new Promise<void>((resolve, reject) => {\r\n            const rate = DataManager.instance.loadingRate\r\n            switch (type) {\r\n                case ENUM_RESOURCE_TYPE.AUDIO:\r\n                    cc.resources.loadDir('audio', cc.AudioClip, (finished: number, total: number) => {\r\n                        // 资源加载进度\r\n                        // 保留两位小数\r\n                        const loadingRate = Math.floor((rate + 0.5 * finished / total) * 100) / 100\r\n                        DataManager.instance.loadingRate = Math.max(loadingRate, DataManager.instance.loadingRate)\r\n                    }, (err, assets) => {\r\n                        if (err) reject && reject()\r\n                        let asset: any\r\n                        for (let i = 0; i < assets.length; i++) {\r\n                            asset = assets[i];\r\n                            if (!this.clipMap[asset.name]) this.clipMap[asset.name] = asset\r\n                        }\r\n                        resolve && resolve()\r\n                    })\r\n                    break\r\n                case ENUM_RESOURCE_TYPE.FLAG:\r\n                    cc.resources.loadDir('flag', cc.SpriteFrame, (finished: number, total: number) => {\r\n                        // 资源加载进度\r\n                        // 保留两位小数\r\n                        const loadingRate = Math.floor((rate + 0.5 * finished / total) * 100) / 100\r\n                        DataManager.instance.loadingRate = Math.max(loadingRate, DataManager.instance.loadingRate)\r\n                    }, (err, assets) => {\r\n                        if (err) reject && reject()\r\n                        let asset: any\r\n                        for (let i = 0; i < assets.length; i++) {\r\n                            asset = assets[i];\r\n                            if (!this.flagMap[asset.name]) this.flagMap[asset.name] = asset\r\n                        }\r\n                        resolve && resolve()\r\n                    })\r\n                    break\r\n            }\r\n        })\r\n    }\r\n\r\n    public getClip(name: string) {\r\n        return this.clipMap[name]\r\n    }\r\n\r\n    public getFlag(name: string) {\r\n        return this.flagMap[name]\r\n    }\r\n}\r\n"]}