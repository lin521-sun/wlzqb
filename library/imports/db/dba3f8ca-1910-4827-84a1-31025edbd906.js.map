{"version":3,"sources":["assets\\script\\Camera.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["// Created by carolsail\r\n\r\nimport { ENUM_GAME_EVENT } from './Enum';\r\nimport DataManager from './manager/DataManager';\r\nimport EventManager from './manager/EventManager';\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class Camera extends cc.Component {\r\n\r\n    isMove: boolean = false\r\n    // 位移目标位置为下一个block中心\r\n    targetPos: cc.Vec2 = cc.Vec2.ZERO;\r\n\r\n    onLoad() {\r\n        EventManager.instance.on(ENUM_GAME_EVENT.CAMERA_MOVE, this.onCameraMove, this)\r\n    }\r\n\r\n    protected onDestroy(): void {\r\n        EventManager.instance.off(ENUM_GAME_EVENT.CAMERA_MOVE, this.onCameraMove)\r\n    }\r\n    /**\r\n     * 当摄像机移动时触发的事件处理函数。\r\n     * 主要用于计算和设置摄像机的目标位置，基于当前和下一个场景物体的位置。\r\n     * \r\n     * @param {Object} param0 包含当前和下一个场景物体位置的对象。\r\n     * @param {cc.Vec2} param0.current 当前场景物体的位置。\r\n     * @param {cc.Vec2} [param0.next] 下一个场景物体的位置，如果有的话。\r\n     */\r\n    onCameraMove({ current, next }) {\r\n        this.isMove = false\r\n        const level = DataManager.instance.currentData\r\n        if (level['cameraMove'].x || level['cameraMove'].y) {\r\n            this.isMove = true\r\n            // const endpoint = DataManager.instance.endpoint\r\n            if (level['cameraMove'].x) {\r\n                let moveX = current.x\r\n                if (next) {\r\n                    const mid = Math.abs(next.x - current.x) / 2\r\n                    if (next.x >= current.x) {\r\n                        moveX += mid\r\n                    } else {\r\n                        moveX -= mid\r\n                    }\r\n                }\r\n                this.targetPos.x = moveX\r\n            } else {\r\n                this.targetPos.x = 0\r\n            }\r\n\r\n            if (level['cameraMove'].y) {\r\n                let moveY = current.y\r\n                if (next) {\r\n                    const mid = Math.abs(next.y - current.y) / 2\r\n                    if (next.y >= current.y) {\r\n                        moveY += mid\r\n                    } else {\r\n                        moveY -= mid\r\n                    }\r\n                }\r\n                if (moveY > 0) moveY = Math.min(0, moveY)\r\n                if (moveY < 0) moveY = Math.min(-200, moveY + 200)\r\n                this.targetPos.y = moveY\r\n            } else {\r\n                this.targetPos.y = 0\r\n            }\r\n        } else {\r\n            this.node.setPosition(cc.Vec2.ZERO)\r\n        }\r\n    }\r\n\r\n    onCameraReset() {\r\n        this.isMove = false\r\n        this.node.setPosition(cc.Vec2.ZERO)\r\n    }\r\n\r\n    update(dt: number) {\r\n        if (this.isMove) {\r\n            // 相机所在位置\r\n            let currentPos = this.node.getPosition();\r\n            // 平滑过度\r\n            currentPos.lerp(this.targetPos, 0.02, currentPos);\r\n            this.node.setPosition(currentPos);\r\n        }\r\n    }\r\n}\r\n"]}