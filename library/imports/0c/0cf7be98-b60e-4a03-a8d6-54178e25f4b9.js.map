{"version":3,"sources":["assets\\script\\manager\\EventManager.ts"],"names":[],"mappings":";;;;;AAAA,uBAAuB;;AAOvB;IAAA;QAWI,aAAQ,GAAmC,IAAI,GAAG,EAAE,CAAA;IAoExD,CAAC;IA5EU,wBAAW,GAAlB;QACI,IAAI,IAAI,CAAC,SAAS,KAAK,IAAI,EAAE;YACzB,IAAI,CAAC,SAAS,GAAG,IAAI,IAAI,EAAE,CAAA;SAC9B;QAED,OAAO,IAAI,CAAC,SAAS,CAAA;IACzB,CAAC;IAID,sBAAW,wBAAQ;aAAnB;YACI,OAAO,IAAI,CAAC,WAAW,EAAgB,CAAA;QAC3C,CAAC;;;OAAA;IACD;;;;;;;;;SASK;IACL,yBAAE,GAAF,UAAG,IAAY,EAAE,KAAe,EAAE,OAAiB;QAC/C,IAAI,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;YACzB,IAAM,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,CAAA;YACxC,QAAQ,CAAC,IAAI,CAAC,EAAE,KAAK,OAAA,EAAE,OAAO,SAAA,EAAE,CAAC,CAAA;SACpC;aAAM;YACH,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC,EAAE,KAAK,OAAA,EAAE,OAAO,SAAA,EAAE,CAAC,CAAC,CAAA;SAChD;IACL,CAAC;IACD;;;;;;;SAOK;IACL,0BAAG,GAAH,UAAI,IAAY,EAAE,KAAe;QAC7B,IAAI,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;YACzB,IAAM,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,CAAA;YACxC,IAAM,KAAK,GAAG,QAAQ,CAAC,SAAS,CAAC,UAAA,IAAI,IAAI,OAAA,IAAI,CAAC,KAAK,IAAI,KAAK,EAAnB,CAAmB,CAAC,CAAA;YAC7D,IAAI,KAAK,GAAG,CAAC,CAAC;gBAAE,QAAQ,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAA;SAC5C;IACL,CAAC;IACD;;;;;;;;;WASO;IACP,2BAAI,GAAJ,UAAK,IAAY;QAAE,gBAAoB;aAApB,UAAoB,EAApB,qBAAoB,EAApB,IAAoB;YAApB,+BAAoB;;QACnC,IAAI,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;YACzB,IAAM,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,CAAA;YACxC,QAAQ,CAAC,OAAO,CAAC,UAAC,EAAkB;oBAAhB,KAAK,WAAA,EAAE,OAAO,aAAA;gBAC9B,OAAO,CAAC,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,CAAA;YAC1D,CAAC,CAAC,CAAA;SACL;IACL,CAAC;IACD;;;;;;;;UAQM;IACN,4BAAK,GAAL;QACI,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,CAAA;IACzB,CAAC;IA7Ec,sBAAS,GAAQ,IAAI,CAAA;IA8ExC,mBAAC;CA/ED,AA+EC,IAAA;kBA/EoB,YAAY","file":"","sourceRoot":"/","sourcesContent":["// Created by carolsail\r\n\r\ninterface IEventItem {\r\n    event: Function\r\n    context: unknown\r\n}\r\n\r\nexport default class EventManager {\r\n    private static _instance: any = null\r\n\r\n    static getInstance<T>(): T {\r\n        if (this._instance === null) {\r\n            this._instance = new this()\r\n        }\r\n\r\n        return this._instance\r\n    }\r\n\r\n    eventMap: Map<String, Array<IEventItem>> = new Map()\r\n\r\n    static get instance() {\r\n        return this.getInstance<EventManager>()\r\n    }\r\n    /**\r\n       * 注册事件监听器。\r\n       * \r\n       * 此方法用于将一个事件监听函数绑定到特定的事件名上。如果事件名已存在，则将新的监听函数添加到已有的监听函数列表中；\r\n       * 如果事件名不存在，则创建一个新的事件名并添加监听函数。\r\n       * \r\n       * @param name 事件名。用于标识要监听的事件。\r\n       * @param event 事件监听函数。当事件被触发时，这个函数将被调用。\r\n       * @param context 上下文对象。可选参数，用于指定事件监听函数执行时的上下文对象，默认为undefined。\r\n       */\r\n    on(name: string, event: Function, context?: unknown) {\r\n        if (this.eventMap.has(name)) {\r\n            const eventArr = this.eventMap.get(name)\r\n            eventArr.push({ event, context })\r\n        } else {\r\n            this.eventMap.set(name, [{ event, context }])\r\n        }\r\n    }\r\n    /**\r\n       * 取消绑定一个事件处理函数。\r\n       * @param name 事件的名称。\r\n       * @param event 待取消绑定的事件处理函数。\r\n       * \r\n       * 此函数用于从特定事件名下的事件处理函数数组中移除指定的事件处理函数。\r\n       * 如果事件名存在且数组中包含指定的事件处理函数，则将其移除。\r\n       */\r\n    off(name: string, event: Function) {\r\n        if (this.eventMap.has(name)) {\r\n            const eventArr = this.eventMap.get(name)\r\n            const index = eventArr.findIndex(item => item.event == event)\r\n            if (index > -1) eventArr.splice(index, 1)\r\n        }\r\n    }\r\n    /**\r\n         * 发送事件给对应的监听器。\r\n         * \r\n         * 此函数用于触发特定名称的事件，事件的监听器将根据名称从事件映射表中找到并调用。\r\n         * 如果事件有上下文（context），则在该上下文中调用事件处理函数；如果没有，则直接调用事件处理函数。\r\n         * 这种设计允许灵活地处理事件，无论是需要特定上下文还是不需要。\r\n         * \r\n         * @param name 事件的名称。这是用来从事件映射表中查找对应的事件监听器的关键字。\r\n         * @param params 传递给事件处理函数的参数。这些参数是可变的，允许调用者传递任意数量的参数。\r\n         */\r\n    emit(name: string, ...params: unknown[]) {\r\n        if (this.eventMap.has(name)) {\r\n            const eventArr = this.eventMap.get(name)\r\n            eventArr.forEach(({ event, context }) => {\r\n                context ? event.apply(context, params) : event(params)\r\n            })\r\n        }\r\n    }\r\n    /**\r\n        * 清空事件映射表\r\n        * \r\n        * 该方法用于清除当前实例中事件映射表的所有绑定。调用后，事件映射表将为空，不再包含任何事件绑定。\r\n        * 这是清理资源、避免内存泄漏的一种方式，特别是在需要重新绑定事件或完全解绑所有事件时。\r\n        * \r\n        * @remarks\r\n        * 此方法不接受任何参数，也不返回任何值。\r\n        */\r\n    clear() {\r\n        this.eventMap.clear()\r\n    }\r\n}"]}